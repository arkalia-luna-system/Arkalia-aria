name: ARKALIA ARIA CI/CD

on:
  push:
    branches:
    - main
    - develop
  pull_request:
    branches:
    - main
    - develop

# Configuration globale pour Ã©viter la surcharge
env:
  PYTHON_VERSION: "3.10"
  BANDIT_TIMEOUT: 300  # 5 minutes max
  SAFETY_TIMEOUT: 180   # 3 minutes max
  PYTEST_TIMEOUT: 600   # 10 minutes max

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 15  # Timeout global du job
    strategy:
      matrix:
        python-version:
        - '3.10'
        - '3.11'
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    - name: Run tests with timeout
      run: |
        timeout ${{ env.PYTEST_TIMEOUT }} pytest tests/ --cov=. --cov-report=xml --cov-report=html --maxfail=5
    - name: Upload coverage
      uses: codecov/codecov-action@v3
      if: always()

  lint:
    runs-on: ubuntu-latest
    timeout-minutes: 10  # Timeout global du job
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-lint-${{ hashFiles('**/requirements.txt') }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black ruff mypy
    - name: Run Black
      run: timeout 60 black --check --diff .
    - name: Run Ruff
      run: timeout 120 ruff check . --output-format=github
    - name: Run MyPy
      run: timeout 180 mypy . --ignore-missing-imports || true

  security:
    runs-on: ubuntu-latest
    timeout-minutes: 15  # Timeout global du job
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-security-${{ hashFiles('**/requirements.txt') }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
    - name: Run Bandit with timeout and limits
      run: |
        timeout ${{ env.BANDIT_TIMEOUT }} bandit -c config/.bandit -r . || true
    - name: Run Safety with timeout
      run: |
        timeout ${{ env.SAFETY_TIMEOUT }} safety check --config config/.safety || true
    - name: Run security scan
      run: |
        timeout 300 python -m devops_automation.security.aria_security_validator || true
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          reports/bandit-report.json
          reports/safety-report.json

  build:
    runs-on: ubuntu-latest
    timeout-minutes: 20  # Timeout global du job
    needs:
    - test
    - lint
    - security
    steps:
    - uses: actions/checkout@v4
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    - name: Cache Docker layers
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-
    - name: Build Docker image with timeout
      run: |
        timeout 900 docker build -t arkalia-aria:${{ github.sha }} . --cache-from type=local,src=/tmp/.buildx-cache --cache-to type=local,dest=/tmp/.buildx-cache-new,mode=max
    - name: Move cache
      run: |
        rm -rf /tmp/.buildx-cache
        mv /tmp/.buildx-cache-new /tmp/.buildx-cache
    - name: Test Docker image
      run: |
        timeout 60 docker run --rm arkalia-aria:${{ github.sha }} python -c "import main; print('Image test passed')"

  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 10  # Timeout global du job
    needs:
    - build
    if: github.ref == 'refs/heads/main'
    steps:
    - name: Deploy to production
      run: |
        echo "ðŸš€ Deploying ARKALIA ARIA to production..."
        echo "âœ… Build completed successfully"
        echo "ðŸ“¦ Image: arkalia-aria:${{ github.sha }}"