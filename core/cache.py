#!/usr/bin/env python3
"""
ARKALIA ARIA - Gestionnaire de Cache
====================================

Syst√®me de cache intelligent avec TTL, invalidation et gestion de la m√©moire.
"""

import logging
import threading
import time
from collections.abc import Callable
from typing import Any

from .exceptions import CacheError

logger = logging.getLogger(__name__)


class CacheManager:
    """
    Gestionnaire de cache intelligent avec TTL et invalidation.

    Fournit un syst√®me de cache thread-safe avec expiration automatique
    et gestion de la m√©moire.
    """

    def __init__(self, default_ttl: int = 300, max_size: int = 1000) -> None:
        """
        Initialise le gestionnaire de cache.

        Args:
            default_ttl: TTL par d√©faut en secondes
            max_size: Taille maximale du cache
        """
        self.default_ttl = default_ttl
        self.max_size = max_size
        self._cache: dict[str, dict[str, Any]] = {}
        self._lock = threading.RLock()
        self._access_times: dict[str, float] = {}

        logger.info(f"üóÑÔ∏è CacheManager initialis√© (TTL: {default_ttl}s, Max: {max_size})")

    def _is_expired(self, key: str) -> bool:
        """
        V√©rifie si une entr√©e du cache a expir√©.

        Args:
            key: Cl√© de l'entr√©e

        Returns:
            True si l'entr√©e a expir√©
        """
        if key not in self._cache:
            return True

        entry = self._cache[key]
        if "expires_at" not in entry:
            return False

        return time.time() > entry["expires_at"]

    def _cleanup_expired(self) -> None:
        """Supprime les entr√©es expir√©es du cache."""
        current_time = time.time()
        expired_keys = []

        for key, entry in self._cache.items():
            if "expires_at" in entry and current_time > entry["expires_at"]:
                expired_keys.append(key)

        for key in expired_keys:
            del self._cache[key]
            self._access_times.pop(key, None)

        if expired_keys:
            logger.debug(
                f"üßπ Nettoyage cache: {len(expired_keys)} entr√©es expir√©es supprim√©es"
            )

    def _evict_lru(self) -> None:
        """Supprime l'entr√©e la moins r√©cemment utilis√©e."""
        if not self._access_times:
            return

        # Trouver la cl√© avec le temps d'acc√®s le plus ancien
        lru_key = min(self._access_times.keys(), key=lambda k: self._access_times[k])

        del self._cache[lru_key]
        del self._access_times[lru_key]

        logger.debug(f"üóëÔ∏è √âviction LRU: cl√© '{lru_key}' supprim√©e")

    def get(self, key: str) -> Any | None:
        """
        R√©cup√®re une valeur du cache.

        Args:
            key: Cl√© de la valeur

        Returns:
            Valeur mise en cache ou None si non trouv√©e/expir√©e
        """
        with self._lock:
            if key not in self._cache or self._is_expired(key):
                return None

            # Mettre √† jour le temps d'acc√®s
            self._access_times[key] = time.time()

            logger.debug(f"üì• Cache hit: {key}")
            return self._cache[key]["data"]

    def set(self, key: str, value: Any, ttl: int | None = None) -> None:
        """
        D√©finit une valeur dans le cache.

        Args:
            key: Cl√© de la valeur
            value: Valeur √† mettre en cache
            ttl: TTL en secondes (utilise le TTL par d√©faut si None)
        """
        with self._lock:
            # Nettoyer les entr√©es expir√©es
            self._cleanup_expired()

            # V√©rifier la taille maximale
            if len(self._cache) >= self.max_size and key not in self._cache:
                self._evict_lru()

            # Calculer le temps d'expiration
            expires_at = None
            if ttl is not None:
                expires_at = time.time() + ttl
            elif self.default_ttl > 0:
                expires_at = time.time() + self.default_ttl

            # Stocker la valeur
            self._cache[key] = {
                "data": value,
                "expires_at": expires_at,
                "created_at": time.time(),
            }
            self._access_times[key] = time.time()

            logger.debug(f"üì§ Cache set: {key} (TTL: {ttl or self.default_ttl}s)")

    def get_or_set(
        self, key: str, func: Callable[[], Any], ttl: int | None = None
    ) -> Any:
        """
        R√©cup√®re une valeur du cache ou l'ex√©cute et la met en cache.

        Args:
            key: Cl√© de la valeur
            func: Fonction √† ex√©cuter si la valeur n'est pas en cache
            ttl: TTL en secondes

        Returns:
            Valeur mise en cache ou nouvellement calcul√©e
        """
        # Essayer de r√©cup√©rer depuis le cache
        cached_value = self.get(key)
        if cached_value is not None:
            return cached_value

        # Ex√©cuter la fonction et mettre en cache
        try:
            value = func()
            self.set(key, value, ttl)
            logger.debug(f"‚ö° Cache miss, fonction ex√©cut√©e: {key}")
            return value
        except Exception as e:
            logger.error(
                f"‚ùå Erreur lors de l'ex√©cution de la fonction pour {key}: {e}"
            )
            raise CacheError(f"Erreur lors de l'ex√©cution de la fonction: {e}") from e

    def delete(self, key: str) -> bool:
        """
        Supprime une entr√©e du cache.

        Args:
            key: Cl√© √† supprimer

        Returns:
            True si l'entr√©e existait et a √©t√© supprim√©e
        """
        with self._lock:
            if key in self._cache:
                del self._cache[key]
                self._access_times.pop(key, None)
                logger.debug(f"üóëÔ∏è Cache delete: {key}")
                return True
            return False

    def clear(self) -> None:
        """Vide compl√®tement le cache."""
        with self._lock:
            self._cache.clear()
            self._access_times.clear()
            logger.info("üßπ Cache vid√© compl√®tement")

    def invalidate_pattern(self, pattern: str) -> int:
        """
        Invalide toutes les entr√©es correspondant √† un pattern.

        Args:
            pattern: Pattern √† rechercher dans les cl√©s

        Returns:
            Nombre d'entr√©es invalid√©es
        """
        with self._lock:
            keys_to_delete = [key for key in self._cache.keys() if pattern in key]

            for key in keys_to_delete:
                del self._cache[key]
                self._access_times.pop(key, None)

            logger.debug(
                f"üîÑ Invalidation pattern '{pattern}': {len(keys_to_delete)} entr√©es"
            )
            return len(keys_to_delete)

    def get_stats(self) -> dict[str, Any]:
        """
        Retourne les statistiques du cache.

        Returns:
            Dictionnaire contenant les statistiques
        """
        with self._lock:
            current_time = time.time()
            active_entries = sum(
                1
                for entry in self._cache.values()
                if not entry.get("expires_at") or current_time <= entry["expires_at"]
            )

            return {
                "total_entries": len(self._cache),
                "active_entries": active_entries,
                "expired_entries": len(self._cache) - active_entries,
                "max_size": self.max_size,
                "default_ttl": self.default_ttl,
                "memory_usage_estimate": len(str(self._cache)),
            }

    def __len__(self) -> int:
        """Retourne le nombre d'entr√©es actives dans le cache."""
        with self._lock:
            current_time = time.time()
            return sum(
                1
                for entry in self._cache.values()
                if not entry.get("expires_at") or current_time <= entry["expires_at"]
            )

    def __contains__(self, key: str) -> bool:
        """V√©rifie si une cl√© existe dans le cache et n'a pas expir√©."""
        return self.get(key) is not None
