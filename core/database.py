#!/usr/bin/env python3
"""
ARKALIA ARIA - Gestionnaire de Base de Donn√©es
==============================================

Gestionnaire centralis√© pour toutes les op√©rations de base de donn√©es.
Utilise le pattern Singleton pour √©viter les connexions multiples.
"""

import logging
import sqlite3
import threading
from pathlib import Path
from typing import Optional

from .exceptions import DatabaseError

logger = logging.getLogger(__name__)


class DatabaseManager:
    """
    Gestionnaire de base de donn√©es centralis√© avec pattern Singleton.

    Fournit une interface unifi√©e pour toutes les op√©rations SQLite
    avec gestion automatique des connexions et des transactions.
    """

    _instance: Optional["DatabaseManager"] = None
    _lock = threading.Lock()

    def __new__(cls, db_path: str = "aria_pain.db") -> "DatabaseManager":
        """Pattern Singleton pour √©viter les connexions multiples."""
        if cls._instance is None:
            with cls._lock:
                if cls._instance is None:
                    cls._instance = super().__new__(cls)
                    cls._instance._initialized = False
        return cls._instance

    def __init__(self, db_path: str = "aria_pain.db") -> None:
        """Initialise le gestionnaire de base de donn√©es."""
        if self._initialized:
            return

        self.db_path = Path(db_path).resolve()
        self._connection: sqlite3.Connection | None = None
        self._lock = threading.Lock()
        self._initialized = True

        # Cr√©er le r√©pertoire si n√©cessaire
        self.db_path.parent.mkdir(parents=True, exist_ok=True)

        logger.info(f"üóÑÔ∏è DatabaseManager initialis√©: {self.db_path}")

    def get_connection(self) -> sqlite3.Connection:
        """
        Obtient une connexion √† la base de donn√©es.

        Returns:
            Connexion SQLite active

        Raises:
            DatabaseError: Si la connexion √©choue
        """
        if self._connection is None:
            with self._lock:
                if self._connection is None:
                    try:
                        self._connection = sqlite3.connect(
                            str(self.db_path), check_same_thread=False
                        )
                        self._connection.row_factory = sqlite3.Row
                        logger.debug(f"Connexion SQLite √©tablie: {self.db_path}")
                    except sqlite3.Error as e:
                        logger.error(f"Erreur connexion SQLite: {e}")
                        raise DatabaseError(
                            f"Impossible de se connecter √† la base: {e}"
                        )

        return self._connection

    def execute_query(self, query: str, params: tuple = ()) -> list[sqlite3.Row]:
        """
        Ex√©cute une requ√™te SELECT et retourne les r√©sultats.

        Args:
            query: Requ√™te SQL SELECT
            params: Param√®tres de la requ√™te

        Returns:
            Liste des lignes de r√©sultats

        Raises:
            DatabaseError: Si la requ√™te √©choue
        """
        try:
            conn = self.get_connection()
            cursor = conn.cursor()
            cursor.execute(query, params)
            return cursor.fetchall()
        except sqlite3.Error as e:
            logger.error(f"Erreur requ√™te SELECT: {e}")
            raise DatabaseError(f"Erreur lors de l'ex√©cution de la requ√™te: {e}")

    def execute_update(self, query: str, params: tuple = ()) -> int:
        """
        Ex√©cute une requ√™te INSERT/UPDATE/DELETE et retourne le nombre de lignes affect√©es.

        Args:
            query: Requ√™te SQL INSERT/UPDATE/DELETE
            params: Param√®tres de la requ√™te

        Returns:
            Nombre de lignes affect√©es

        Raises:
            DatabaseError: Si la requ√™te √©choue
        """
        try:
            conn = self.get_connection()
            cursor = conn.cursor()
            cursor.execute(query, params)
            conn.commit()
            return cursor.rowcount
        except sqlite3.Error as e:
            conn.rollback()
            logger.error(f"Erreur requ√™te UPDATE: {e}")
            raise DatabaseError(f"Erreur lors de l'ex√©cution de la requ√™te: {e}")

    def execute_many(self, query: str, params_list: list[tuple]) -> int:
        """
        Ex√©cute une requ√™te avec plusieurs jeux de param√®tres.

        Args:
            query: Requ√™te SQL
            params_list: Liste des param√®tres

        Returns:
            Nombre total de lignes affect√©es

        Raises:
            DatabaseError: Si la requ√™te √©choue
        """
        try:
            conn = self.get_connection()
            cursor = conn.cursor()
            cursor.executemany(query, params_list)
            conn.commit()
            return cursor.rowcount
        except sqlite3.Error as e:
            conn.rollback()
            logger.error(f"Erreur requ√™te executemany: {e}")
            raise DatabaseError(f"Erreur lors de l'ex√©cution de la requ√™te: {e}")

    def get_count(self, table: str, where_clause: str = "", params: tuple = ()) -> int:
        """
        Compte le nombre d'enregistrements dans une table.

        Args:
            table: Nom de la table
            where_clause: Clause WHERE (optionnelle)
            params: Param√®tres de la clause WHERE

        Returns:
            Nombre d'enregistrements

        Raises:
            DatabaseError: Si la requ√™te √©choue
        """
        query = f"SELECT COUNT(*) FROM {table}"
        if where_clause:
            query += f" WHERE {where_clause}"

        try:
            conn = self.get_connection()
            cursor = conn.cursor()
            cursor.execute(query, params)
            return cursor.fetchone()[0]
        except sqlite3.Error as e:
            logger.error(f"Erreur requ√™te COUNT: {e}")
            raise DatabaseError(f"Erreur lors du comptage: {e}")

    def table_exists(self, table_name: str) -> bool:
        """
        V√©rifie si une table existe.

        Args:
            table_name: Nom de la table

        Returns:
            True si la table existe, False sinon
        """
        query = """
        SELECT name FROM sqlite_master
        WHERE type='table' AND name=?
        """
        try:
            results = self.execute_query(query, (table_name,))
            return len(results) > 0
        except DatabaseError:
            return False

    def close(self) -> None:
        """Ferme la connexion √† la base de donn√©es."""
        if self._connection:
            with self._lock:
                if self._connection:
                    self._connection.close()
                    self._connection = None
                    logger.info("Connexion SQLite ferm√©e")

    def __del__(self):
        """Ferme automatiquement la connexion lors de la destruction."""
        self.close()
