#!/usr/bin/env python3
"""
ARKALIA ARIA - CLI des M√©triques
===============================

Interface en ligne de commande pour le syst√®me de m√©triques ARIA.
Permet la collecte, validation et export des m√©triques depuis le terminal.
"""

import argparse
import json
import sys
from typing import Any

from .collectors.aria_metrics_collector import ARIA_MetricsCollector
from .dashboard.aria_metrics_dashboard import ARIA_MetricsDashboard
from .exporters.aria_metrics_exporter import ARIA_MetricsExporter
from .dashboard.aria_metrics_dashboard import ARIA_MetricsDashboard
from .validators.aria_metrics_validator import ARIA_MetricsValidator


class ARIA_MetricsCLI:
    """
    Interface en ligne de commande pour les m√©triques ARIA.

    Commandes disponibles :
    - collect : Collecte les m√©triques
    - validate : Valide les m√©triques
    - export : Exporte les m√©triques
    - dashboard : G√©n√®re le dashboard HTML
    - health : Affiche le statut de sant√©
    """

    def __init__(self) -> None:
        """Initialise le CLI des m√©triques."""
        self.collector = ARIA_MetricsCollector()
        self.exporter = ARIA_MetricsExporter()
        self.validator = ARIA_MetricsValidator()
        self.dashboard = ARIA_MetricsDashboard()
        self.dashboard = ARIA_MetricsDashboard()

    def run(self, args: list[str] | None = None) -> int:
        """
        Ex√©cute le CLI avec les arguments fournis.

        Args:
            args: Arguments de la ligne de commande

        Returns:
            Code de sortie (0 = succ√®s, 1 = erreur)
        """
        parser = self._create_parser()

        if args is None:
            args = sys.argv[1:]

        parsed_args = parser.parse_args(args)

        try:
            if parsed_args.command == "collect":
                return self._handle_collect(parsed_args)
            elif parsed_args.command == "validate":
                return self._handle_validate(parsed_args)
            elif parsed_args.command == "export":
                return self._handle_export(parsed_args)
            elif parsed_args.command == "dashboard":
                return self._handle_dashboard(parsed_args)
            elif parsed_args.command == "health":
                return self._handle_health(parsed_args)
            else:
                parser.print_help()
                return 1

        except Exception as e:
            print(f"‚ùå Erreur : {e}", file=sys.stderr)
            return 1

    def _create_parser(self) -> argparse.ArgumentParser:
        """Cr√©e le parser d'arguments."""
        parser = argparse.ArgumentParser(
            description="ARKALIA ARIA - Syst√®me de M√©triques",
            formatter_class=argparse.RawDescriptionHelpFormatter,
            epilog="""
Exemples d'utilisation :
  aria-metrics collect                    # Collecte les m√©triques
  aria-metrics validate                   # Valide les m√©triques
  aria-metrics export --format json       # Exporte en JSON
  aria-metrics dashboard                  # G√©n√®re le dashboard
  aria-metrics health                     # Affiche le statut de sant√©
            """,
        )

        subparsers = parser.add_subparsers(dest="command", help="Commandes disponibles")

        # Commande collect
        collect_parser = subparsers.add_parser("collect", help="Collecte les m√©triques")
        collect_parser.add_argument(
            "--project-root", default=".", help="Racine du projet"
        )
        collect_parser.add_argument("--output", help="Fichier de sortie JSON")

        # Commande validate
        validate_parser = subparsers.add_parser("validate", help="Valide les m√©triques")
        validate_parser.add_argument(
            "--project-root", default=".", help="Racine du projet"
        )
        validate_parser.add_argument(
            "--strict", action="store_true", help="Mode strict"
        )

        # Commande export
        export_parser = subparsers.add_parser("export", help="Exporte les m√©triques")
        export_parser.add_argument(
            "--format",
            choices=["json", "markdown", "html", "csv"],
            default="json",
            help="Format d'export",
        )
        export_parser.add_argument(
            "--output-dir", default="metrics_reports", help="R√©pertoire de sortie"
        )
        export_parser.add_argument(
            "--project-root", default=".", help="Racine du projet"
        )

        # Commande dashboard
        dashboard_parser = subparsers.add_parser(
            "dashboard", help="G√©n√®re le dashboard HTML"
        )
        dashboard_parser.add_argument("--output", help="Fichier HTML de sortie")
        dashboard_parser.add_argument(
            "--project-root", default=".", help="Racine du projet"
        )

        # Commande health
        health_parser = subparsers.add_parser(
            "health", help="Affiche le statut de sant√©"
        )
        health_parser.add_argument(
            "--project-root", default=".", help="Racine du projet"
        )
        health_parser.add_argument("--json", action="store_true", help="Sortie JSON")

        return parser

    def _handle_collect(self, args: argparse.Namespace) -> int:
        """G√®re la commande collect."""
        print("üöÄ Collecte des m√©triques ARIA...")

        try:
            # Configurer le collecteur
            if args.project_root != ".":
                self.collector = ARIA_MetricsCollector(args.project_root)

            # Collecter les m√©triques
            metrics = self.collector.collect_all_metrics()

            # Afficher un r√©sum√©
            self._print_collection_summary(metrics)

            # Sauvegarder si demand√©
            if args.output:
                with open(args.output, "w", encoding="utf-8") as f:
                    json.dump(metrics, f, indent=2, ensure_ascii=False)
                print(f"üìÅ M√©triques sauvegard√©es dans : {args.output}")

            return 0

        except Exception as e:
            print(f"‚ùå Erreur lors de la collecte : {e}", file=sys.stderr)
            return 1

    def _handle_validate(self, args: argparse.Namespace) -> int:
        """G√®re la commande validate."""
        print("üîç Validation des m√©triques ARIA...")

        try:
            # Configurer le collecteur
            if args.project_root != ".":
                self.collector = ARIA_MetricsCollector(args.project_root)

            # Collecter et valider
            metrics = self.collector.collect_all_metrics()
            validation_results = self.validator.validate_metrics(metrics)

            # Afficher les r√©sultats
            self._print_validation_results(validation_results, args.strict)

            return 0 if validation_results["is_valid"] else 1

        except Exception as e:
            print(f"‚ùå Erreur lors de la validation : {e}", file=sys.stderr)
            return 1

    def _handle_export(self, args: argparse.Namespace) -> int:
        """G√®re la commande export."""
        print(f"üì§ Export des m√©triques en format {args.format.upper()}...")

        try:
            # Configurer les composants
            if args.project_root != ".":
                self.collector = ARIA_MetricsCollector(args.project_root)

            self.exporter = ARIA_MetricsExporter(args.output_dir)

            # Collecter les m√©triques
            metrics = self.collector.collect_all_metrics()

            # Exporter
            if args.format == "json":
                file_path = self.exporter.export_json(metrics)
            elif args.format == "markdown":
                file_path = self.exporter.export_markdown(metrics)
            elif args.format == "html":
                file_path = self.exporter.export_html(metrics)
            elif args.format == "csv":
                file_path = self.exporter.export_csv(metrics)

            print(f"‚úÖ Export r√©ussi : {file_path}")
            return 0

        except Exception as e:
            print(f"‚ùå Erreur lors de l'export : {e}", file=sys.stderr)
            return 1

    def _handle_dashboard(self, args: argparse.Namespace) -> int:
        """G√®re la commande dashboard."""
        print("üé® G√©n√©ration du dashboard HTML...")

        try:
            # Configurer le collecteur
            if args.project_root != ".":
                self.collector = ARIA_MetricsCollector(args.project_root)

            # Collecter les m√©triques
            metrics = self.collector.collect_all_metrics()

            # G√©n√©rer le dashboard
            dashboard_html = self.dashboard.generate_dashboard_html(metrics)

            # Sauvegarder
            output_file = args.output or "aria_dashboard.html"
            with open(output_file, "w", encoding="utf-8") as f:
                f.write(dashboard_html)

            print(f"‚úÖ Dashboard g√©n√©r√© : {output_file}")
            print(
                "üåê Ouvrez le fichier dans votre navigateur pour voir le dashboard interactif"
            )
            return 0

        except Exception as e:
            print(
                f"‚ùå Erreur lors de la g√©n√©ration du dashboard : {e}", file=sys.stderr
            )
            return 1

    def _handle_health(self, args: argparse.Namespace) -> int:
        """G√®re la commande health."""
        print("üè• V√©rification du statut de sant√©...")

        try:
            # Configurer le collecteur
            if args.project_root != ".":
                self.collector = ARIA_MetricsCollector(args.project_root)

            # Collecter les m√©triques
            metrics = self.collector.collect_all_metrics()
            health_status = self.validator.get_health_status(metrics)

            # Afficher le statut
            if args.json:
                print(json.dumps(health_status, indent=2, ensure_ascii=False))
            else:
                self._print_health_status(health_status)

            return 0 if health_status["status"] in ["excellent", "good"] else 1

        except Exception as e:
            print(f"‚ùå Erreur lors de la v√©rification de sant√© : {e}", file=sys.stderr)
            return 1

    def _print_collection_summary(self, metrics: dict[str, Any]) -> None:
        """Affiche un r√©sum√© de la collecte."""
        print("\nüìä R√©sum√© de la Collecte :")
        print("=" * 50)

        python_files = metrics.get("python_files", {})
        print(f"üêç Fichiers Python : {python_files.get('count', 0)}")
        print(f"üìù Lignes de Code : {python_files.get('total_lines', 0)}")

        tests = metrics.get("tests", {})
        print(f"üß™ Tests : {tests.get('test_files_count', 0)}")
        print(f"üìä Couverture : {tests.get('coverage_percentage', 0):.1f}%")

        aria_specific = metrics.get("aria_specific", {})
        print(f"üéØ Entr√©es Douleur : {aria_specific.get('pain_tracking', 0)}")
        print(f"üîç Patterns : {aria_specific.get('pattern_analysis', 0)}")

        security = metrics.get("security", {})
        print(
            f"üîí Issues S√©curit√© : {security.get('bandit_scan', {}).get('issues_found', 0)}"
        )

        print("=" * 50)

    def _print_validation_results(
        self, results: dict[str, Any], strict: bool = False
    ) -> None:
        """Affiche les r√©sultats de validation."""
        print("\nüîç R√©sultats de Validation :")
        print("=" * 50)

        score = results.get("score", 0)
        is_valid = results.get("is_valid", False)

        print(f"üìä Score Global : {score}/100")
        print(f"‚úÖ Statut : {'Valide' if is_valid else 'Invalide'}")

        alerts = results.get("alerts", [])
        if alerts:
            print(f"\nüö® Alertes ({len(alerts)}) :")
            for alert in alerts:
                severity = alert.get("severity", "unknown")
                message = alert.get("message", "Message manquant")
                print(f"  - {severity.upper()}: {message}")

        recommendations = results.get("recommendations", [])
        if recommendations:
            print(f"\nüí° Recommandations ({len(recommendations)}) :")
            for rec in recommendations:
                message = rec.get("message", "Message manquant")
                print(f"  - {message}")

        print("=" * 50)

    def _print_health_status(self, status: dict[str, Any]) -> None:
        """Affiche le statut de sant√©."""
        print("\nüè• Statut de Sant√© :")
        print("=" * 50)

        status_name = status.get("status", "unknown")
        score = status.get("score", 0)

        print(f"üìä Score : {score}/100")
        print(f"üéØ Statut : {status_name.upper()}")
        print(f"üö® Alertes : {status.get('alerts_count', 0)}")
        print(f"üí° Recommandations : {status.get('recommendations_count', 0)}")

        print("=" * 50)


def main() -> int:
    """Point d'entr√©e principal du CLI."""
    cli = ARIA_MetricsCLI()
    return cli.run()


if __name__ == "__main__":
    sys.exit(main())
