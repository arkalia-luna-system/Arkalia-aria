#!/usr/bin/env python3

"""
ARIA Data Collector - Module de collecte de donn√©es pour ARIA
Adapt√© de Arkalia Metrics Collector pour la recherche m√©dicale
"""

import json
import sqlite3
from datetime import datetime, timedelta
from pathlib import Path
from typing import Any

from core import DatabaseManager
from core.logging import get_logger

logger = get_logger("data_collector")


class ARIADataCollector:
    """Collecteur de donn√©es pour ARIA - adapt√© de Metrics Collector"""

    def __init__(self, db_path: str = "aria_research.db"):
        # Exposer le chemin et s'assurer de la cr√©ation du fichier
        self.db_path = str(db_path)
        Path(self.db_path).parent.mkdir(parents=True, exist_ok=True)
        # Cr√©ation du fichier (permet aussi de lever des erreurs sur chemin invalide)
        conn = sqlite3.connect(self.db_path)
        conn.close()

        # Utiliser le gestionnaire de base de donn√©es centralis√©
        self.db = DatabaseManager(self.db_path)
        self.project_root = Path(".").resolve()
        self._init_database()

        logger.info("üìä ARIA Data Collector initialis√©")

    def _init_database(self):
        """Initialise la base de donn√©es de recherche"""
        # Table des exp√©rimentations
        self.db.execute_update(
            """
            CREATE TABLE IF NOT EXISTS experiments (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT NOT NULL,
                description TEXT,
                hypothesis TEXT,
                methodology TEXT,
                status TEXT DEFAULT 'active',
                start_date TEXT DEFAULT CURRENT_TIMESTAMP,
                end_date TEXT,
                results TEXT,
                conclusions TEXT,
                created_at TEXT DEFAULT CURRENT_TIMESTAMP
            )
            """
        )

        # Table des donn√©es collect√©es
        self.db.execute_update(
            """
            CREATE TABLE IF NOT EXISTS collected_data (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                experiment_id INTEGER,
                data_type TEXT NOT NULL,
                data_value REAL,
                data_text TEXT,
                metadata TEXT,
                timestamp TEXT DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (experiment_id) REFERENCES experiments (id)
            )
            """
        )

        # Table des m√©triques syst√®me
        self.db.execute_update(
            """
            CREATE TABLE IF NOT EXISTS system_metrics (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                metric_name TEXT NOT NULL,
                metric_value REAL NOT NULL,
                unit TEXT,
                category TEXT,
                timestamp TEXT DEFAULT CURRENT_TIMESTAMP
            )
            """
        )

        logger.info("‚úÖ Tables research initialis√©es")

    def create_experiment(
        self, name: str, description: str, hypothesis: str, methodology: str
    ) -> int:
        """Cr√©e une nouvelle exp√©rimentation"""
        try:
            self.db.execute_update(
                """
                INSERT INTO experiments (name, description, hypothesis, methodology)
                VALUES (?, ?, ?, ?)
                """,
                (name, description, hypothesis, methodology),
            )

            # R√©cup√©rer l'ID de l'exp√©rimentation cr√©√©e
            rows = self.db.execute_query("SELECT last_insert_rowid()")
            experiment_id = rows[0][0] if rows else -1

            logger.info(f"Exp√©rimentation cr√©√©e: {name} (ID: {experiment_id})")
            return experiment_id

        except Exception as e:
            logger.error(f"Erreur cr√©ation exp√©rimentation: {e}")
            return -1

    def collect_pain_data(self, experiment_id: int, pain_entry: dict[str, Any]) -> bool:
        """Collecte des donn√©es de douleur pour une exp√©rimentation"""
        try:
            # Enregistrer l'intensit√©
            self.db.execute_update(
                """
                INSERT INTO collected_data
                (experiment_id, data_type, data_value, metadata)
                VALUES (?, ?, ?, ?)
                """,
                (
                    experiment_id,
                    "pain_intensity",
                    pain_entry.get("intensity", 0),
                    json.dumps(pain_entry),
                ),
            )

            # Enregistrer les d√©clencheurs
            if pain_entry.get("physical_trigger"):
                self.db.execute_update(
                    """
                    INSERT INTO collected_data
                    (experiment_id, data_type, data_text, metadata)
                    VALUES (?, ?, ?, ?)
                    """,
                    (
                        experiment_id,
                        "physical_trigger",
                        pain_entry["physical_trigger"],
                        json.dumps(pain_entry),
                    ),
                )

            if pain_entry.get("mental_trigger"):
                self.db.execute_update(
                    """
                    INSERT INTO collected_data
                    (experiment_id, data_type, data_text, metadata)
                    VALUES (?, ?, ?, ?)
                    """,
                    (
                        experiment_id,
                        "mental_trigger",
                        pain_entry["mental_trigger"],
                        json.dumps(pain_entry),
                    ),
                )

            # Enregistrer l'action
            if pain_entry.get("action_taken"):
                self.db.execute_update(
                    """
                    INSERT INTO collected_data
                    (experiment_id, data_type, data_text, metadata)
                    VALUES (?, ?, ?, ?)
                    """,
                    (
                        experiment_id,
                        "action_taken",
                        pain_entry["action_taken"],
                        json.dumps(pain_entry),
                    ),
                )

            logger.debug(
                f"Donn√©es de douleur collect√©es pour exp√©rimentation {experiment_id}"
            )
            return True

        except Exception as e:
            logger.error(f"Erreur collecte donn√©es douleur: {e}")
            return False

    def collect_emotion_data(
        self, experiment_id: int, emotion_data: dict[str, Any]
    ) -> bool:
        """Collecte des donn√©es √©motionnelles pour une exp√©rimentation"""
        try:
            # Enregistrer l'√©motion
            self.db.execute_update(
                """
                INSERT INTO collected_data
                (experiment_id, data_type, data_text, data_value, metadata)
                VALUES (?, ?, ?, ?, ?)
                """,
                (
                    experiment_id,
                    "emotion",
                    emotion_data.get("emotion", "unknown"),
                    emotion_data.get("intensity", 0.0),
                    json.dumps(emotion_data),
                ),
            )

            # Enregistrer le niveau de stress
            if emotion_data.get("stress_level") is not None:
                self.db.execute_update(
                    """
                    INSERT INTO collected_data
                    (experiment_id, data_type, data_value, metadata)
                    VALUES (?, ?, ?, ?)
                    """,
                    (
                        experiment_id,
                        "stress_level",
                        emotion_data["stress_level"],
                        json.dumps(emotion_data),
                    ),
                )

            logger.debug(
                f"Donn√©es √©motionnelles collect√©es pour exp√©rimentation {experiment_id}"
            )
            return True

        except Exception as e:
            logger.error(f"Erreur collecte donn√©es √©motionnelles: {e}")
            return False

    def collect_system_metrics(self) -> dict[str, Any]:
        """Collecte les m√©triques syst√®me ARIA"""
        try:
            metrics = {}

            # M√©triques de base de donn√©es
            metrics.update(self._collect_database_metrics())

            # M√©triques de performance
            metrics.update(self._collect_performance_metrics())

            # M√©triques d'utilisation
            metrics.update(self._collect_usage_metrics())

            # Sauvegarder les m√©triques
            self._save_system_metrics(metrics)

            return metrics

        except Exception as e:
            logger.error(f"Erreur collecte m√©triques syst√®me: {e}")
            return {"error": str(e)}

    def _collect_database_metrics(self) -> dict[str, Any]:
        """Collecte les m√©triques de base de donn√©es"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()

            # Compter les entr√©es de douleur
            cursor.execute(
                "SELECT COUNT(*) FROM collected_data WHERE data_type = 'pain_intensity'"
            )
            pain_entries = cursor.fetchone()[0]

            # Compter les exp√©rimentations actives
            cursor.execute("SELECT COUNT(*) FROM experiments WHERE status = 'active'")
            active_experiments = cursor.fetchone()[0]

            # Compter les donn√©es √©motionnelles
            cursor.execute(
                "SELECT COUNT(*) FROM collected_data WHERE data_type = 'emotion'"
            )
            emotion_entries = cursor.fetchone()[0]

            conn.close()

            return {
                "pain_entries_count": pain_entries,
                "active_experiments_count": active_experiments,
                "emotion_entries_count": emotion_entries,
                "database_size_mb": self._get_database_size(),
            }

        except Exception as e:
            logger.error(f"Erreur m√©triques base de donn√©es: {e}")
            return {}

    def _collect_performance_metrics(self) -> dict[str, Any]:
        """Collecte les m√©triques de performance"""
        try:
            # Temps de r√©ponse moyen (simulation)
            response_time = 0.15  # 150ms

            # Taux de succ√®s des pr√©dictions (simulation)
            prediction_success_rate = 0.85  # 85%

            # Utilisation m√©moire (simulation)
            memory_usage_mb = 45.2

            return {
                "avg_response_time_ms": response_time,
                "prediction_success_rate": prediction_success_rate,
                "memory_usage_mb": memory_usage_mb,
                "uptime_hours": self._get_uptime_hours(),
            }

        except Exception as e:
            logger.error(f"Erreur m√©triques performance: {e}")
            return {}

    def _collect_usage_metrics(self) -> dict[str, Any]:
        """Collecte les m√©triques d'utilisation"""
        try:
            # Sessions aujourd'hui
            today = datetime.now().date()
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()

            cursor.execute(
                """
                    SELECT COUNT(*) FROM collected_data
                WHERE DATE(timestamp) = ?
            """,
                (today.isoformat(),),
            )

            daily_entries = cursor.fetchone()[0]

            # Entr√©es cette semaine
            week_ago = (datetime.now() - timedelta(days=7)).date()
            cursor.execute(
                """
                    SELECT COUNT(*) FROM collected_data
                WHERE DATE(timestamp) >= ?
            """,
                (week_ago.isoformat(),),
            )

            weekly_entries = cursor.fetchone()[0]

            conn.close()

            return {
                "daily_entries": daily_entries,
                "weekly_entries": weekly_entries,
                "avg_entries_per_day": weekly_entries / 7,
                "most_active_hour": self._get_most_active_hour(),
            }

        except Exception as e:
            logger.error(f"Erreur m√©triques utilisation: {e}")
            return {}

    def _get_database_size(self) -> float:
        """Calcule la taille de la base de donn√©es en MB"""
        try:
            db_path = Path(self.db_path)
            if db_path.exists():
                size_bytes = db_path.stat().st_size
                return round(size_bytes / (1024 * 1024), 2)
            return 0.0
        except Exception:
            return 0.0

    def _get_uptime_hours(self) -> float:
        """Calcule le temps de fonctionnement en heures"""
        try:
            # Simulation bas√©e sur la premi√®re entr√©e
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()

            cursor.execute("SELECT MIN(timestamp) FROM collected_data")
            result = cursor.fetchone()[0]

            conn.close()

            if result:
                first_entry = datetime.fromisoformat(result)
                uptime = datetime.now() - first_entry
                return round(uptime.total_seconds() / 3600, 2)

            return 0.0

        except Exception:
            return 0.0

    def _get_most_active_hour(self) -> int:
        """Trouve l'heure la plus active"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()

            cursor.execute(
                """
                SELECT strftime('%H', timestamp) as hour, COUNT(*) as count
                FROM collected_data
                GROUP BY hour
                ORDER BY count DESC
                LIMIT 1
            """
            )

            result = cursor.fetchone()
            conn.close()

            return int(result[0]) if result else 12  # D√©faut: midi

        except Exception:
            return 12

    def _save_system_metrics(self, metrics: dict[str, Any]):
        """Sauvegarde les m√©triques syst√®me"""
        try:
            for metric_name, metric_value in metrics.items():
                if isinstance(metric_value, int | float):
                    self.db.execute_update(
                        """
                        INSERT INTO system_metrics (metric_name, metric_value, category)
                        VALUES (?, ?, 'system')
                        """,
                        (metric_name, metric_value),
                    )

        except Exception as e:
            logger.error(f"Erreur sauvegarde m√©triques: {e}")

    def analyze_experiment(self, experiment_id: int) -> dict[str, Any]:
        """Analyse les r√©sultats d'une exp√©rimentation"""
        try:
            # R√©cup√©rer les donn√©es de l'exp√©rimentation
            rows = self.db.execute_query(
                """
                SELECT data_type, data_value, data_text, timestamp
                FROM collected_data
                WHERE experiment_id = ?
                ORDER BY timestamp
                """,
                (experiment_id,),
            )

            # Convertir sqlite3.Row en tuples pour mypy
            data = [tuple(r) for r in rows]

            if not data:
                return {
                    "experiment_id": experiment_id,
                    "status": "no_data",
                    "message": "Aucune donn√©e collect√©e pour cette exp√©rimentation",
                }

            # Analyser les donn√©es
            analysis = self._analyze_data(data)

            # R√©cup√©rer les infos de l'exp√©rimentation
            exp_info_rows = self.db.execute_query(
                """
                SELECT name, description, hypothesis, methodology
                FROM experiments
                WHERE id = ?
                """,
                (experiment_id,),
            )

            exp_info = exp_info_rows[0] if exp_info_rows else None

            return {
                "experiment_id": experiment_id,
                "experiment_name": exp_info[0] if exp_info else "Unknown",
                "description": exp_info[1] if exp_info else "",
                "hypothesis": exp_info[2] if exp_info else "",
                "methodology": exp_info[3] if exp_info else "",
                "data_points": len(data),
                "analysis": analysis,
                "status": "completed",
            }

        except Exception as e:
            logger.error(f"Erreur analyse exp√©rimentation: {e}")
            return {"error": str(e)}

    def _analyze_data(self, data: list[tuple]) -> dict[str, Any]:
        """Analyse les donn√©es collect√©es"""
        analysis = {}

        # S√©parer par type de donn√©es
        pain_data = [d for d in data if d[0] == "pain_intensity"]
        emotion_data = [d for d in data if d[0] == "emotion"]
        trigger_data = [
            d for d in data if d[0] in ["physical_trigger", "mental_trigger"]
        ]

        # Analyse des donn√©es de douleur
        if pain_data:
            intensities = [d[1] for d in pain_data if d[1] is not None]
            if intensities:
                analysis["pain_analysis"] = {
                    "avg_intensity": sum(intensities) / len(intensities),
                    "max_intensity": max(intensities),
                    "min_intensity": min(intensities),
                    "total_entries": len(intensities),
                }

        # Analyse des √©motions
        if emotion_data:
            emotions = [d[2] for d in emotion_data if d[2]]
            emotion_counts: dict[str, int] = {}
            for emotion in emotions:
                emotion_counts[emotion] = emotion_counts.get(emotion, 0) + 1

            analysis["emotion_analysis"] = {
                "dominant_emotion": (
                    max(emotion_counts.items(), key=lambda x: x[1])[0]
                    if emotion_counts
                    else "unknown"
                ),
                "emotion_distribution": emotion_counts,
                "total_emotions": len(emotions),
            }

        # Analyse des d√©clencheurs
        if trigger_data:
            triggers = [d[2] for d in trigger_data if d[2]]
            trigger_counts: dict[str, int] = {}
            for trigger in triggers:
                trigger_counts[trigger] = trigger_counts.get(trigger, 0) + 1

            analysis["trigger_analysis"] = {
                "most_common_trigger": (
                    max(trigger_counts.items(), key=lambda x: x[1])[0]
                    if trigger_counts
                    else "unknown"
                ),
                "trigger_distribution": trigger_counts,
                "total_triggers": len(triggers),
            }

        return analysis

    def get_research_summary(self) -> dict[str, Any]:
        """Retourne un r√©sum√© de la recherche"""
        try:
            # Statistiques g√©n√©rales
            total_experiments = self.db.get_count("experiments")
            active_experiments = self.db.get_count("experiments", "status = 'active'")
            total_data_points = self.db.get_count("collected_data")

            # M√©triques syst√®me
            system_metrics = self.collect_system_metrics()

            return {
                "total_experiments": total_experiments,
                "active_experiments": active_experiments,
                "total_data_points": total_data_points,
                "system_metrics": system_metrics,
                "research_status": "active" if active_experiments > 0 else "inactive",
                "data_quality": "high" if total_data_points > 100 else "developing",
            }

        except Exception as e:
            logger.error(f"Erreur r√©sum√© recherche: {e}")
            return {"error": str(e)}


def main():
    """Test du module ARIA Data Collector"""
    print("üß™ Test du module ARIA Data Collector")
    print("=" * 50)

    # Cr√©er l'instance
    collector = ARIADataCollector()

    # Test cr√©ation d'exp√©rimentation
    print("\n1Ô∏è‚É£ Test cr√©ation exp√©rimentation")
    exp_id = collector.create_experiment(
        name="Analyse Patterns Douleur",
        description="√âtude des patterns de douleur sur 7 jours",
        hypothesis="La douleur suit des patterns temporels pr√©visibles",
        methodology="Collecte quotidienne + analyse ML",
    )
    print(f"Exp√©rimentation cr√©√©e avec ID: {exp_id}")

    # Test collecte de donn√©es
    print("\n2Ô∏è‚É£ Test collecte donn√©es douleur")
    pain_entry = {
        "intensity": 7,
        "physical_trigger": "stress",
        "mental_trigger": "anxi√©t√©",
        "action_taken": "respiration",
        "timestamp": datetime.now().isoformat(),
    }
    collector.collect_pain_data(exp_id, pain_entry)

    # Test collecte donn√©es √©motionnelles
    print("\n3Ô∏è‚É£ Test collecte donn√©es √©motionnelles")
    emotion_data = {
        "emotion": "stressed",
        "intensity": 0.8,
        "stress_level": 0.7,
        "timestamp": datetime.now().isoformat(),
    }
    collector.collect_emotion_data(exp_id, emotion_data)

    # Test m√©triques syst√®me
    print("\n4Ô∏è‚É£ Test m√©triques syst√®me")
    metrics = collector.collect_system_metrics()
    print(f"M√©triques: {metrics}")

    # Test analyse exp√©rimentation
    print("\n5Ô∏è‚É£ Test analyse exp√©rimentation")
    analysis = collector.analyze_experiment(exp_id)
    print(f"Analyse: {analysis}")

    # Test r√©sum√© recherche
    print("\n6Ô∏è‚É£ Test r√©sum√© recherche")
    summary = collector.get_research_summary()
    print(f"R√©sum√©: {summary}")

    print("\n‚úÖ Test ARIA Data Collector termin√©")


if __name__ == "__main__":
    main()
